name: Kernel CI

on:
  push:
    branches: [ main, 'feat/kernel*' ]
    paths:
      - 'kernel/**'
      - '.github/workflows/kernel-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'kernel/**'
      - '.github/workflows/kernel-ci.yml'

jobs:
  kernel-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install lint tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        
    - name: Check code formatting
      working-directory: kernel
      run: |
        # Create .clang-format file
        cat > .clang-format << 'EOF'
        BasedOnStyle: LLVM
        IndentWidth: 4
        UseTab: Never
        BreakBeforeBraces: Linux
        AllowShortIfStatementsOnASingleLine: false
        IndentCaseLabels: false
        ColumnLimit: 100
        EOF
        
        # Check formatting (dry run)
        find . -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror 2>&1 | tee format.log
        
        # If there are formatting issues, show diff
        if [ -s format.log ]; then
          echo "Code formatting issues found. Run clang-format to fix."
          find . -name "*.c" -o -name "*.h" | xargs clang-format -i
          git diff
          exit 1
        fi

  kernel-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate documentation
      working-directory: kernel
      run: |
        # Create Doxyfile
        cat > Doxyfile << 'EOF'
        PROJECT_NAME = "EMBODIOS Kernel"
        PROJECT_BRIEF = "AI Operating System Kernel"
        INPUT = . 
        RECURSIVE = YES
        EXTRACT_ALL = YES
        GENERATE_HTML = YES
        GENERATE_LATEX = NO
        OUTPUT_DIRECTORY = docs
        QUIET = YES
        WARNINGS = YES
        WARN_IF_UNDOCUMENTED = YES
        WARN_IF_DOC_ERROR = YES
        EOF
        
        # Generate docs
        doxygen Doxyfile
        
        # Check for warnings
        if [ -f docs/html/index.html ]; then
          echo "Documentation generated successfully"
        else
          echo "Documentation generation failed"
          exit 1
        fi
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: kernel-docs
        path: kernel/docs/html/

  kernel-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install security tools
      run: |
        sudo apt-get update
        sudo apt-get install -y flawfinder rats
        
    - name: Run flawfinder
      working-directory: kernel
      run: |
        # Run security analysis
        flawfinder --minlevel=2 --html . > security-report.html 2>&1 || true
        flawfinder --minlevel=2 . 2>&1 | tee security.log
        
        # Check for high-risk issues
        if grep -E "Risk Level: [4-5]" security.log; then
          echo "High-risk security issues found!"
          cat security.log
          exit 1
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: kernel/security-report.html

  kernel-benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build benchmark suite
      working-directory: kernel
      run: |
        # Create memory allocator benchmark
        cat > test/bench_allocator.c << 'EOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <time.h>
        #include <string.h>
        
        #define ITERATIONS 100000
        #define MAX_SIZE 8192
        
        double benchmark_allocations() {
            clock_t start = clock();
            void* ptrs[1000];
            
            for (int i = 0; i < ITERATIONS; i++) {
                int idx = i % 1000;
                if (ptrs[idx]) free(ptrs[idx]);
                ptrs[idx] = malloc(rand() % MAX_SIZE + 1);
            }
            
            // Cleanup
            for (int i = 0; i < 1000; i++) {
                if (ptrs[i]) free(ptrs[i]);
            }
            
            return (double)(clock() - start) / CLOCKS_PER_SEC;
        }
        
        int main() {
            printf("EMBODIOS Kernel Allocator Benchmark\n");
            printf("===================================\n");
            
            // Warmup
            benchmark_allocations();
            
            // Actual benchmark
            double total = 0;
            for (int i = 0; i < 5; i++) {
                double time = benchmark_allocations();
                printf("Run %d: %.3f seconds\n", i + 1, time);
                total += time;
            }
            
            printf("\nAverage: %.3f seconds\n", total / 5);
            printf("Allocations/sec: %.0f\n", ITERATIONS / (total / 5));
            
            return 0;
        }
        EOF
        
        gcc -O2 -o test/bench_allocator test/bench_allocator.c
        ./test/bench_allocator
        
    - name: Memory usage analysis
      working-directory: kernel
      run: |
        # Analyze kernel binary size
        echo "Kernel Size Analysis"
        echo "==================="
        
        if [ -f embodios.elf ]; then
          size -A embodios.elf | tee size_report.txt
          
          # Extract section sizes
          echo -e "\nSection breakdown:"
          objdump -h embodios.elf | grep -E "^\s*[0-9]+" | \
            awk '{printf "%-20s %10s bytes\n", $2, strtonum("0x" $3)}'
        fi